using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.ComponentModel.DataAnnotations;

namespace <%= ApplicationName %>.Models.<%= "#{@entity_type}.#{@filing_type}" %>
{
  public class <%= name %>
  {
    public int ID { get; set; }
    <% @fields.each do |field| %>
	[Display(Name = "<%= field.display_name %>")]
    public <%= "#{field.csharp_type} #{field.csharp_name} { get; set; }"  %><% end %>
	public bool Unlocked { get; set; }
	<% if not_applicableable? %>[Display(Name = "Not Applicable")]
	public bool NotApplicable { get; set; } <% end %>

	// Derived Fields
	<% @calculations.each do |calculation, fields| %>
	public int <%= "#{calculation}" %>
	{
		get { return <% fields.each do |field| %><% if field.calculated %><%= "#{field.calculation_table}_#{field.calculated_name}" %><% else %><%= field.csharp_name %><% end %><%= (field == fields.last) ? ";" : " + " %><% end %> }
	}
	<% end %>
    public <%= name %>()
    {
      this.ID = -1;
    }
    
    public void Load(int ID)
    {
      using (SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["connection"].ConnectionString + ";initial catalog=<%= DatabaseName %>"))
      {
        SqlCommand command = new SqlCommand("<%= print_sql_sp_name_load %>", connection);
        SqlDataReader reader;
        
		command.CommandType = CommandType.StoredProcedure;
        command.Parameters.AddWithValue("@<%= name  %>ID", ID);

        connection.Open();
        reader = command.ExecuteReader();
		if (reader.HasRows)
		{
        reader.Read();
        <% @fields.each do |field| %>
        this.<%= field.csharp_name %> = (<%= field.csharp_type %>)reader["<%= field.sql_column_name %>"];<% end %>
		this.Unlocked = (bool)reader["Unlocked"];
		<% if not_applicableable? %>this.NotApplicable = (bool)reader["NotApplicable"];<% end %>
		this.ID = ID;
		}
		
        connection.Close();
      }
    }
	
	public void LoadByFilingID(int FilingID)
    {
      using (SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["connection"].ConnectionString + ";initial catalog=<%= DatabaseName %>"))
      {
        SqlCommand command = new SqlCommand("<%= print_sql_sp_name_load_by_filingid %>", connection);
        SqlDataReader reader;
        
		command.CommandType = CommandType.StoredProcedure;
        command.Parameters.AddWithValue("@FilingID", FilingID);

        connection.Open();
        reader = command.ExecuteReader();                                                   
		if (reader.HasRows)
		{
        reader.Read();
		
		this.ID = (int)reader["<%= name %>ID"];
        <% @fields.each do |field| %>
        this.<%= field.csharp_name %> = (<%= field.csharp_type %>)reader["<%= field.sql_column_name %>"];<% end %>
		this.Unlocked = (bool)reader["Unlocked"];
		<% if not_applicableable? %>this.NotApplicable = (bool)reader["NotApplicable"];<% end %>
		}
		
        connection.Close();
      }
    }

    public void Save()
    {
      if (this.ID == -1)
      {
        SaveNew();
      }
      else
      {
        Update();
      }
    }

    protected void SaveNew()
    {
      using (SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["connection"].ConnectionString + ";initial catalog=<%= DatabaseName %>"))
      {
        SqlCommand command = new SqlCommand("<%= print_sql_sp_name_save %>", connection);
        
		command.CommandType = CommandType.StoredProcedure;
        <% @fields.each do |field| %>
        command.Parameters.AddWithValue("<%= field.sql_parameter  %>", this.<%= field.csharp_name %>);<% end %>
		command.Parameters.AddWithValue("@Unlocked", this.Unlocked);
		<% if not_applicableable? %>command.Parameters.AddWithValue("@NotApplicable", this.NotApplicable);<% end %>
		
        connection.Open();
        this.ID = System.Convert.ToInt32(command.ExecuteScalar());
        connection.Close();
      }
    }

    protected void Update()
    {
      using (SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["connection"].ConnectionString + ";initial catalog=<%= DatabaseName %>"))
      {
        SqlCommand command = new SqlCommand("<%= print_sql_sp_name_update %>", connection);

		command.CommandType = CommandType.StoredProcedure;
        command.Parameters.AddWithValue("@<%= name %>ID", this.ID);
        <% @fields.each do |field| %>
        command.Parameters.AddWithValue("<%= field.sql_parameter  %>", this.<%= field.csharp_name %>);<% end %>
		command.Parameters.AddWithValue("@Unlocked", this.Unlocked);
		<% if not_applicableable? %>command.Parameters.AddWithValue("@NotApplicable", this.NotApplicable);<% end %>

        connection.Open();
        command.ExecuteNonQuery();  
        connection.Close();
      }
    }

    public void Delete()
    {
      using (SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["connection"].ConnectionString + ";initial catalog=<%= DatabaseName %>"))
      {
        SqlCommand command = new SqlCommand("<%= print_sql_sp_name_delete %>", connection);

		command.CommandType = CommandType.StoredProcedure;
        command.Parameters.AddWithValue("@<%= name %>ID", this.ID);

        connection.Open();
        command.ExecuteNonQuery();  
        connection.Close();
      }
    }
	
  }
}
